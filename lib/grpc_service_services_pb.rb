# Generated by the protocol buffer compiler.  DO NOT EDIT!
# Source: grpc_service.proto for package 'inference'
# Original file comments:
# Copyright 2020-2024, NVIDIA CORPORATION & AFFILIATES. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#  * Neither the name of NVIDIA CORPORATION nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
# OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

require 'grpc'
require 'grpc_service_pb'

module Inference
  module GRPCInferenceService
    # @@
    # @@.. cpp:var:: service InferenceService
    # @@
    # @@   Inference Server GRPC endpoints.
    # @@
    class Service

      include ::GRPC::GenericService

      self.marshal_class_method = :encode
      self.unmarshal_class_method = :decode
      self.service_name = 'inference.GRPCInferenceService'

      # @@  .. cpp:var:: rpc ServerLive(ServerLiveRequest) returns
      # @@       (ServerLiveResponse)
      # @@
      # @@     Check liveness of the inference server.
      # @@
      rpc :ServerLive, ::Inference::ServerLiveRequest, ::Inference::ServerLiveResponse
      # @@  .. cpp:var:: rpc ServerReady(ServerReadyRequest) returns
      # @@       (ServerReadyResponse)
      # @@
      # @@     Check readiness of the inference server.
      # @@
      rpc :ServerReady, ::Inference::ServerReadyRequest, ::Inference::ServerReadyResponse
      # @@  .. cpp:var:: rpc ModelReady(ModelReadyRequest) returns
      # @@       (ModelReadyResponse)
      # @@
      # @@     Check readiness of a model in the inference server.
      # @@
      rpc :ModelReady, ::Inference::ModelReadyRequest, ::Inference::ModelReadyResponse
      # @@  .. cpp:var:: rpc ServerMetadata(ServerMetadataRequest) returns
      # @@       (ServerMetadataResponse)
      # @@
      # @@     Get server metadata.
      # @@
      rpc :ServerMetadata, ::Inference::ServerMetadataRequest, ::Inference::ServerMetadataResponse
      # @@  .. cpp:var:: rpc ModelMetadata(ModelMetadataRequest) returns
      # @@       (ModelMetadataResponse)
      # @@
      # @@     Get model metadata.
      # @@
      rpc :ModelMetadata, ::Inference::ModelMetadataRequest, ::Inference::ModelMetadataResponse
      # @@  .. cpp:var:: rpc ModelInfer(ModelInferRequest) returns
      # @@       (ModelInferResponse)
      # @@
      # @@     Perform inference using a specific model.
      # @@
      rpc :ModelInfer, ::Inference::ModelInferRequest, ::Inference::ModelInferResponse
      # @@  .. cpp:var:: rpc ModelStreamInfer(stream ModelInferRequest) returns
      # @@       (stream ModelStreamInferResponse)
      # @@
      # @@     Perform streaming inference.
      # @@
      rpc :ModelStreamInfer, stream(::Inference::ModelInferRequest), stream(::Inference::ModelStreamInferResponse)
      # @@  .. cpp:var:: rpc ModelConfig(ModelConfigRequest) returns
      # @@       (ModelConfigResponse)
      # @@
      # @@     Get model configuration.
      # @@
      rpc :ModelConfig, ::Inference::ModelConfigRequest, ::Inference::ModelConfigResponse
      # @@  .. cpp:var:: rpc ModelStatistics(
      # @@                     ModelStatisticsRequest)
      # @@                   returns (ModelStatisticsResponse)
      # @@
      # @@     Get the cumulative inference statistics for a model.
      # @@
      rpc :ModelStatistics, ::Inference::ModelStatisticsRequest, ::Inference::ModelStatisticsResponse
      # @@  .. cpp:var:: rpc RepositoryIndex(RepositoryIndexRequest) returns
      # @@       (RepositoryIndexResponse)
      # @@
      # @@     Get the index of model repository contents.
      # @@
      rpc :RepositoryIndex, ::Inference::RepositoryIndexRequest, ::Inference::RepositoryIndexResponse
      # @@  .. cpp:var:: rpc RepositoryModelLoad(RepositoryModelLoadRequest) returns
      # @@       (RepositoryModelLoadResponse)
      # @@
      # @@     Load or reload a model from a repository.
      # @@
      rpc :RepositoryModelLoad, ::Inference::RepositoryModelLoadRequest, ::Inference::RepositoryModelLoadResponse
      # @@  .. cpp:var:: rpc RepositoryModelUnload(RepositoryModelUnloadRequest)
      # @@       returns (RepositoryModelUnloadResponse)
      # @@
      # @@     Unload a model.
      # @@
      rpc :RepositoryModelUnload, ::Inference::RepositoryModelUnloadRequest, ::Inference::RepositoryModelUnloadResponse
      # @@  .. cpp:var:: rpc SystemSharedMemoryStatus(
      # @@                     SystemSharedMemoryStatusRequest)
      # @@                   returns (SystemSharedMemoryStatusRespose)
      # @@
      # @@     Get the status of all registered system-shared-memory regions.
      # @@
      rpc :SystemSharedMemoryStatus, ::Inference::SystemSharedMemoryStatusRequest, ::Inference::SystemSharedMemoryStatusResponse
      # @@  .. cpp:var:: rpc SystemSharedMemoryRegister(
      # @@                     SystemSharedMemoryRegisterRequest)
      # @@                   returns (SystemSharedMemoryRegisterResponse)
      # @@
      # @@     Register a system-shared-memory region.
      # @@
      rpc :SystemSharedMemoryRegister, ::Inference::SystemSharedMemoryRegisterRequest, ::Inference::SystemSharedMemoryRegisterResponse
      # @@  .. cpp:var:: rpc SystemSharedMemoryUnregister(
      # @@                     SystemSharedMemoryUnregisterRequest)
      # @@                   returns (SystemSharedMemoryUnregisterResponse)
      # @@
      # @@     Unregister a system-shared-memory region.
      # @@
      rpc :SystemSharedMemoryUnregister, ::Inference::SystemSharedMemoryUnregisterRequest, ::Inference::SystemSharedMemoryUnregisterResponse
      # @@  .. cpp:var:: rpc CudaSharedMemoryStatus(
      # @@                     CudaSharedMemoryStatusRequest)
      # @@                   returns (CudaSharedMemoryStatusRespose)
      # @@
      # @@     Get the status of all registered CUDA-shared-memory regions.
      # @@
      rpc :CudaSharedMemoryStatus, ::Inference::CudaSharedMemoryStatusRequest, ::Inference::CudaSharedMemoryStatusResponse
      # @@  .. cpp:var:: rpc CudaSharedMemoryRegister(
      # @@                     CudaSharedMemoryRegisterRequest)
      # @@                   returns (CudaSharedMemoryRegisterResponse)
      # @@
      # @@     Register a CUDA-shared-memory region.
      # @@
      rpc :CudaSharedMemoryRegister, ::Inference::CudaSharedMemoryRegisterRequest, ::Inference::CudaSharedMemoryRegisterResponse
      # @@  .. cpp:var:: rpc CudaSharedMemoryUnregister(
      # @@                     CudaSharedMemoryUnregisterRequest)
      # @@                   returns (CudaSharedMemoryUnregisterResponse)
      # @@
      # @@     Unregister a CUDA-shared-memory region.
      # @@
      rpc :CudaSharedMemoryUnregister, ::Inference::CudaSharedMemoryUnregisterRequest, ::Inference::CudaSharedMemoryUnregisterResponse
      # @@  .. cpp:var:: rpc TraceSetting(TraceSettingRequest)
      # @@                   returns (TraceSettingResponse)
      # @@
      # @@     Update and get the trace setting of the Triton server.
      # @@
      rpc :TraceSetting, ::Inference::TraceSettingRequest, ::Inference::TraceSettingResponse
      # @@  .. cpp:var:: rpc LogSettings(LogSettingsRequest)
      # @@                   returns (LogSettingsResponse)
      # @@
      # @@     Update and get the log settings of the Triton server.
      # @@
      rpc :LogSettings, ::Inference::LogSettingsRequest, ::Inference::LogSettingsResponse
    end

    Stub = Service.rpc_stub_class
  end
end
